#! /bin/bash

function usage(){
    echo ""
    echo "Usage:"
    echo "  gitupdate [options]"
    echo "Options:"
    echo "  -k                   keep all downloaded, extracted files in \"/tmp\""
    echo "  -s                   skip downloading"
    echo "  -f                   forcibly update no matter what version it is"
    echo "  -h                   this prints me..."
    exit
}

function process(){
    if [[ "$1" == "-f" ]]; then
        local opt=-f
        shift
    fi
    if [[ "$1" == "" ]]; then
        return 1
    fi
    
    local target="$1"
    if [[ "$2" == "" ]]; then
        local files="$gitupk/$target/."
    else
        local files="$2"
    fi
    
    upkit process $opt "$target" upkit update "$files" "$target"
}

unset keep_tmp force_update skip_download
until [ $# -eq 0 ]; do
    case "$1" in
        -k) 
            keep_tmp=1; shift;;
        -f)
            force_update=1; shift;;
        -s)    
            skip_download=1; shift;;
        -h)
            usage; shift;;    
        *) 
            echo Unknown option \"$1\"
            usage
        ;;
    esac
done

gh_tags=https://github.com/git-for-windows/git/tags

echo ""
# Gathering
echo "Gathering information..."
latest=$(curl $gh_tags | grep -o /git-for-windows/git/releases/tag/[^\"]* | head -1 | awk -F/ '{print $NF}')
version=$(echo $latest | grep -Po "\d+\.\d+.\d+")
echo "Gathered { latest: \"$latest\", version: \"$version\" }"
if [[ x$force_update != x1 && "$version" == "$(git --version | grep -Po "\d+\.\d+.\d+")" ]]; then
    echo There is no need to update git 
    echo ""
    echo "[ git --version ]" 
    echo "-----------------"
    git --version
    exit
fi

echo ""
# Downloading
filename=Git-$version-64-bit.exe
download_href="https://github.com/git-for-windows/git/releases/download/$latest/$filename"
echo "Downloading file from $download_href..."
if [[ ! x$skip_download == x1 ]]; then
    upkit get /tmp/$filename $download_href
else
    echo skipped
fi

echo ""
# Unpacking
echo -n "Unpacking $filename..."
if [[ ! -e /tmp/gitupk ]]; then
    upkit xis /tmp/$filename /tmp/gitupk 2>&1 | upkit progress
fi
echo done


echo ""
gitupk="/tmp/gitupk/{app}"
# Updating
process -f "/mingw64/bin"
process -f "/mingw64/lib"
process "/mingw64/libexec/git-core"
process "/mingw64/share/git"
process "/mingw64/share/git-core"
process "/mingw64/share/git-gui"
process -f "/mingw64/share/perl5"
cp -f $gitupk/usr/bin/git* "/usr/bin/"

echo -n "copying binaries..."
mkdir -p "/bin"
cp -f "$gitupk/bin/git.exe" "/bin" & echo -n "."
cp -f "$gitupk/bin/bash.exe" "/bin" & echo -n "."
cp -f "$gitupk/cmd/git-gui.exe" "/bin" & echo -n "."
cp -f "$gitupk/cmd/gitk.exe" "/bin" & echo -n "."
echo done

echo ""
# Cleaning up
if [[ x$keep_tmp != x1 ]]; then
    echo -n "Cleaing up downloaded and extracted files..."
    rm -rf /tmp/$filename
    rm -rf /tmp/gitupk
    echo done
fi
