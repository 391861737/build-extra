#! /bin/bash

# backup the given directory
function backup(){
    if [[ ! -e "$1" ]]; then
        echo "* nothing to backup, skip" >&2
        return 0
    fi
    local b="$1.backup"
    if [[ -e "$b" ]]; then
        echo the backup exists, removing is needed >&2
        echo -n \* removing...... >&2
        rm -rf "$b" > /dev/null
        echo done >&2
    fi
    
    echo -n \* backing up ... >&2
    mv "$1" "$b" > /dev/null && mkdir "$1" > /dev/null
    echo done >&2
    echo "$b"
}

# update 
function update(){
    if [[ "$1" != "" && "$2" != "" ]]; then
        mkdir -p "$2"
        echo -n \* upating....... >&2
        \cp -rlf "$1" "$2" > /dev/null 2>&1 || \cp -rf "$1" "$2"
        echo done >&2
    else
        echo "Please give valid [ Source ] and [ Dest ] targets" >&2
    fi
}

function restore(){
    if [[ ! -e "$1" ]]; then
        echo "Seems that the given backup folder \"$1\" does not exist"
        return 1
    fi
    if [[ -d "$2" ]]; then
        rm -rf "$2" > /dev/null
    fi
    echo -n \* restoring .... >&2
    mv "$1" "$2" > /dev/null
    echo done >&2
}

# cleanup
function cleanup(){
    if [[ -e "$1" ]]; then
        echo -n \* cleaning up... >&2
        rm -rf "$1"
        echo done >&2
    else
        echo "* nothing to cleanup, skip" >&2
    fi
}

# batch process
function process(){
    if [[ "$1" == "-f" ]]; then
        local f=1
        shift  
    fi
    if [[ "$1" != "" ]]; then
        local target="$1"; shift;
        echo processing $target
        if [[ x$f == x1 ]]; then
            eval $@
        else
            local b=`backup "$target"`
            eval $@ && cleanup "$b" || restore "$b" "$target"
        fi
        
        echo done
    else
        echo $@
        echo "Please give a valid [ Target ] and [ Command ]"
    fi    
}

# verify 
function verify(){
    until [ $# -eq 0 ]; do
        case "$1" in
            -o) local optional=1; shift;;
            -c) local create_dir=1; shift;;
            -l) local label="$2"; shift; shift;;
            *) local target="$1"; shift;;
        esac
    done
    
    if [[ "$target" == "" ]]; then
        if [[ x$optional != x1 ]]; then
            echo "Could not find any [ $label ], please specify one" >&2
            return 1
        fi
        return 2
    elif [[ ! -d "$target" ]]; then
        if [[ x$create_dir == x1 ]]; then
            mkdir -p "$target"
        else
            echo The given $label is not valid >&2
            return 1
        fi
    fi
    return 0
}

# download from internet
function get(){
    if [[ "$1" == "" ]]; then
        echo "Please give a [ Filename ]" >&2
        return 1
    fi
    if [[ ! -d $(dirname "$1") ]]; then
        echo "Please give a valid [ Filename ] which resides in an existing folder" >&2
    fi
    if [[ "$2" == "" ]]; then
        echo "Please give an [ Url ]" >&2
        return 1
    fi

    ( where wget > /dev/null 2>&1 \
        || ( echo Y|pacman -S wget 2>/dev/null ) \
        && wget -c -O $1 $2 ) \
      || \
    ( where curl > /dev/null 2>&1 \
        || ( echo Y|pacman -S curl 2>/dev/null ) \
        && curl -L -C - -o $1 $2 ) \
      || \
    { echo "Could not find / install / execute the wget nor the curl" >&2; exit 1; }
}

# extract a msi installer package
function xmsi(){
    if [[ ! -e "$1" ]]; then
        echo "Please give a valid [ Msi-File ]" >&2
        return 1
    fi
    if [[ -e "$2" ]]; then
        echo "Please give an valid [ TARGETDIR ] which must not exist" >&2
        return 1
    fi
    
    msiexec //a "$(cygpath -w "$1")" //qb TARGETDIR="$(cygpath -w "$2")" || return 1
}

# extract inno setup package
function xis(){
    if [[ ! -e "$1" ]]; then
        echo "Please give a valid [ Is-File ]" >&2
        return 1
    fi
    if [[ "$2" == "" ]]; then
        echo "Please give an valid [ DIR ]" >&2
        return 1
    fi
    
    innounp -x -y -d"$(cygpath -w $2)" "$(cygpath -w $1)" >&2
}

function progress(){
    awk 'BEGIN {ORS="."} {if(NR%1000==0)print ""}'
}

case "$1" in
    backup|update|cleanup|process|verify|get|xmsi|xis|progress)
        C=()
        for i in "$@"; do
            C+=("\"$i\"") # Add escaped quotes to keep them while evaluating
        done
        eval "${C[@]}";;
    *)
        if [[ "$1" != "" ]]; then
            echo "Invalid command $1"
        fi
        echo "Usage:"
        echo "  upkit backup   <source>                        backup the <source> folder as <source>.backup beside it"
        echo "  upkit update   <source> <dest>                 update, try to hard link files and then copy files if failed"
        echo "  upkit cleanup  <source>                        remove the given source folder forcibly and recursivly"
        echo "  upkit process  [options] <source> [command]    backup folder <source> then execute the given [command] and "
        echo "                                                 finally clean <source> up"
        echo "                 -f                              forcibly process the given [command] without any backing up "
        echo "                                                 and cleaning up"
        echo "  upkit verify   [options] <target>              verify the <target> is not an empty string and do exists as a"
        echo "                                                 folder "
        echo "                 -o                              the given <target> is optional which means it could be empty "
        echo "                                                 but if not emtpy, it must be a valid folder"
        echo "                 -c                              create if the given <target> does not exist "
        echo "                 -l <label>                      the label of the given <target> which would represent the "
        echo "                                                 <target> in error messages"
        echo "  upkit get      <filename> <url>                download the given <url> using wget and store it as <filename>"
        echo "  upkit xmsi     <msi-file> <TARGETDIR>          extract all files inside the given <msi-file> to <TARGETDIR> "
        echo "                                                 using msiexec.exe which is part of the Windows Installer "
        echo "                                                 Utility"
        echo "  upkit get      <is-file> <DIR>                 extract all files packaged in an Inno Setup package file "
        echo "                                                 <is-file> to <DIR> using innounp.exe"
        echo "  upkit progress                                 print progress with every 1000 line as one dot"
        ;;
esac
